CREATE OR REPLACE PROCEDURE Errore(errorMessage VARCHAR(200))
AS $$
BEGIN
	RAISE EXCEPTION '%', errorMessage;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------

--Per far sì che n°sale sia un attributo calcolato:
CREATE OR REPLACE FUNCTION CalcolaNumeroSaleDi(codRistorante Ristorante.codR%TYPE)
RETURNS integer
AS $$
DECLARE ret integer;
BEGIN
	SELECT N_S.count INTO ret
	FROM (
		SELECT S.codR, COUNT(S.codS)
		FROM Ristorante AS R NATURAL JOIN Sala AS S
		GROUP BY S.codR
	) AS N_S
	WHERE N_S.codR = codRistorante;
	IF ret IS NULL THEN 
		ret:=0;
	END IF;
	RETURN ret;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION AggiornaNumeroSale()
RETURNS TRIGGER
AS $$
BEGIN 
	UPDATE Ristorante
	SET n°sale = (SELECT CalcolaNumeroSaleDi(codR))
	WHERE codR = NEW.codR OR codR = OLD.codR;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER AggiornaNumeroSale
AFTER INSERT OR DELETE ON Sala
FOR EACH ROW
EXECUTE FUNCTION AggiornaNumeroSale();

CREATE OR REPLACE TRIGGER n°saleIsReadOnly
BEFORE UPDATE OF n°sale ON Ristorante
FOR EACH ROW
EXECUTE PROCEDURE Errore('L attributo n°sale è calcolato automaticamente usando la tabella Sala, quindi non serve modificarlo a mano');

--------------------------------------------------------------------------

--Per far sì che n°tavoli sia un attributo calcolato:
CREATE OR REPLACE FUNCTION CalcolaNumeroTavoliDi(codSala Sala.codS%TYPE)
RETURNS integer
AS $$
DECLARE ret integer;
BEGIN
	SELECT N_T.count INTO ret
	FROM (
		SELECT S.codS, COUNT(T.codT)
		FROM Sala AS S NATURAL JOIN Tavolo AS T
		GROUP BY S.codS
	) AS N_T
	WHERE N_T.codS = codSala;
	IF ret IS NULL THEN 
		ret:=0;
	END IF;
	RETURN ret;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION AggiornaNumeroTavoli()
RETURNS TRIGGER
AS $$
BEGIN 
	UPDATE Sala
	SET n°tavoli = (SELECT CalcolaNumeroTavoliDi(codS))
	WHERE codS = NEW.codS OR codS = OLD.codS;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER AggiornaNumeroTavoli
AFTER INSERT OR DELETE ON Tavolo
FOR EACH ROW
EXECUTE FUNCTION AggiornaNumeroTavoli();

CREATE OR REPLACE TRIGGER n°tavoliIsReadOnly
BEFORE UPDATE OF n°tavoli ON Sala
FOR EACH ROW
EXECUTE PROCEDURE Errore('L attributo n°tavoli è calcolato automaticamente usando la tabella Tavolo, quindi non serve modificarlo a mano');

--------------------------------------------------------------------------

--Un tavolo tecnicamente è sempre adiacente con sé stesso, ma è un'informazione inutile da salvare in questo database.
--Quindi questo trigger fa si che venga ignorato un qualsiasi inserimento da parte dell'utente di una coppia identica
CREATE OR REPLACE FUNCTION niente()
RETURNS TRIGGER
AS $$
BEGIN 
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER RidondanzaTavoloAdiacenteConSeStesso
BEFORE INSERT OR UPDATE ON TavoliAdiacenti
FOR EACH ROW
WHEN (NEW.Tavolo1=NEW.Tavolo2)
EXECUTE FUNCTION niente();

--------------------------------------------------------------------------

--Per far sì che Tavolata sia una tabella calcolata:
CREATE OR REPLACE FUNCTION AggiornaTavolata()
RETURNS TRIGGER
AS $$
BEGIN
	DELETE FROM Tavolata;
	INSERT INTO Tavolata(dataDiArrivo, n°avventori, codT) (
		SELECT dataDiArrivo, COUNT(codCartaIdentità), codT
		FROM Clientela
		GROUP BY dataDiArrivo, codT
	);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER AggiornaTavolata
AFTER INSERT OR DELETE OR UPDATE OF dataDiArrivo, codT ON Clientela
FOR EACH STATEMENT
EXECUTE FUNCTION AggiornaTavolata();

CREATE OR REPLACE TRIGGER TavolataIsReadOnly
BEFORE INSERT OR DELETE OR UPDATE ON Tavolata
FOR EACH ROW
EXECUTE PROCEDURE Errore('La tabella Tavolata è calcolata automaticamente usando la tabella Clientela, quindi non serve modificarla a mano');

--------------------------------------------------------------------------

--scrivi da qua in poi eventuali tuoi attributi calcolati o altri eventuali calcoli automatici per i tuoi attributi

